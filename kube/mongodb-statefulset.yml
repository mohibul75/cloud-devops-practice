---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: dev
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "node-1"
        effect: "NoSchedule"
      - key: "dedicated"
        operator: "Equal"
        value: "node-2"
        effect: "NoSchedule"
      containers:
      - name: mongodb
        image: mongo:6.0.11
        command:
        - /bin/bash
        - -c
        - |
          set -e
          # Generate a secure keyfile with at least 6 characters
          openssl rand -base64 756 > /data/db/keyfile
          chmod 400 /data/db/keyfile

          # Clean up any stale lock files
          rm -f /data/db/mongod.lock

          # Start MongoDB without auth for initialization
          mongod --port 27017 --bind_ip_all --replSet myReplicaSet --fork --logpath /data/db/mongod.log

          # Wait for MongoDB to start
          until mongosh --port 27017 --eval "print('waiting...')" &>/dev/null; do
            sleep 2
            echo "Waiting for MongoDB to start..."
          done
          echo "MongoDB started"

          printf "\n\t mongod: check and set master \n\n"
          mongosh --port 27017 --eval '
          try {
            rs.status();
          } catch (err) {
            if (err.codeName === "NotYetInitialized") {
              rs.initiate({
                _id: "myReplicaSet",
                members: [{ _id: 0, host: "mongodb-0.mongodb.dev.svc.cluster.local:27017", priority: 1 }],
                settings: { electionTimeoutMillis: 2000 }
              });
            }
          }'

          # Wait for replica set to initialize
          until mongosh --port 27017 --eval "rs.isMaster().ismaster" | grep -q "true"; do
            sleep 2
            echo "Waiting for replica set primary..."
          done
          echo "Replica set primary is ready"

          printf "\n\t mongod: create admin user \n\n"
          mongosh --port 27017 --eval "
          try {
            admin = db.getSiblingDB('admin');
            admin.createUser({
              user: '$MONGO_USERNAME',
              pwd: '$MONGO_PASSWORD',
              roles: [{ role: 'root', db: 'admin' }]
            });
          } catch (err) {
            if (!err.message.includes('already exists')) {
              throw err;
            }
          }"

          printf "\n\t mongod: create todo database and user \n\n"
          mongosh --port 27017 --eval "
          try {
            admin = db.getSiblingDB('admin');
            admin.auth('$MONGO_USERNAME', '$MONGO_PASSWORD');
            todos = db.getSiblingDB('todos');
            todos.createUser({
              user: '$MONGO_USERNAME',
              pwd: '$MONGO_PASSWORD',
              roles: [{ role: 'readWrite', db: 'todos' }]
            });
          } catch (err) {
            if (!err.message.includes('already exists')) {
              throw err;
            }
          }"

          # Shutdown MongoDB
          mongod --shutdown --dbpath /data/db

          # Start MongoDB with auth enabled
          exec mongod --port 27017 --bind_ip_all --replSet myReplicaSet --auth --keyFile /data/db/keyfile
        ports:
        - containerPort: 27017
          name: mongodb
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        env:
        - name: MONGO_USERNAME
          value: "admin"
        - name: MONGO_PASSWORD
          value: "Abc12345"
        - name: MONGO_REPLICA_SET
          value: "myReplicaSet"
        - name: MONGO_PORT
          value: "27017"
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data-mongodb-0
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: dev
  labels:
    app: mongodb
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    app: mongodb
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: dev
type: Opaque
stringData:
  username: ${MONGO_USERNAME}
  password: ${MONGO_PASSWORD}