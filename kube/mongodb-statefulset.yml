---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: dev
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        command:
        - /bin/sh
        - -c
        - |
          set -x # print command been ran
          set -e # fail if any command fails

          # Generate keyfile for replica set authentication
          echo "${MONGO_INITDB_ROOT_PASSWORD}" | base64 > /data/db/keyfile
          chmod 400 /data/db/keyfile

          printf "\n\t mongod:: start in the background \n\n";
          mongod \
            --port="${MONGO_PORT}" \
            --bind_ip_all \
            --replSet="${MONGO_REPLICA_SET}" \
            --quiet > /tmp/mongo.log.json 2>&1 &

          sleep 9;

          printf "\n\t mongod: check and set master \n\n";
          mongosh --port "${MONGO_PORT}" --eval '
            try {
              rs.status();
            } catch (err) {
              if (err.codeName === "NotYetInitialized") {
                rs.initiate({});
                sleep(3000);
              }
            }'

          printf "\n\t mongod: add user \n\n";
          mongosh --port "${MONGO_PORT}" --eval "
            try {
              db.getSiblingDB('admin').createUser({
                user: '${MONGO_INITDB_ROOT_USERNAME}',
                pwd: '${MONGO_INITDB_ROOT_PASSWORD}',
                roles: [{ role: 'userAdminAnyDatabase', db: 'admin' }]
              });
              
              db.getSiblingDB('todos').createUser({
                user: '${MONGO_INITDB_ROOT_USERNAME}',
                pwd: '${MONGO_INITDB_ROOT_PASSWORD}',
                roles: [{ role: 'readWrite', db: 'todos' }]
              });
            } catch (err) {
              if (!err.message.includes('already exists')) {
                throw err;
              }
            }"

          printf "\n\t mongod: shutdown \n\n";
          mongod --shutdown;
          sleep 3;

          printf "\n\t mongod: restart with authentication \n\n";
          exec mongod \
            --auth \
            --keyFile=/data/db/keyfile \
            --port="${MONGO_PORT}" \
            --bind_ip_all \
            --replSet="${MONGO_REPLICA_SET}" \
            --verbose=v
        ports:
        - containerPort: 27017
          name: mongodb
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        - name: MONGO_REPLICA_SET
          value: "myReplicaSet"
        - name: MONGO_PORT
          value: "27017"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 20
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 20
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: dev
  labels:
    app: mongodb
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    app: mongodb
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: dev
type: Opaque
stringData:
  username: ${MONGODB_USERNAME}
  password: ${MONGODB_PASSWORD}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: mongodb
  namespace: dev
spec:
  host: mongodb.dev.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    loadBalancer:
      simple: ROUND_ROBIN