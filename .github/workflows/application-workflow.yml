name: Application CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/*
      - fix/*
    paths:
      - 'app/**'
      - 'kube/todo-application-workload.yml'
      - '.github/workflows/application-workflow.yml'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ap-southeast-1
  EKS_CLUSTER_NAME: infra-practice-dev
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/application
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        id: deploy
        run: |
          export VERSION="${{ env.IMAGE_TAG }}"
          export DOCKER_REGISTRY="${{ secrets.DOCKERHUB_USERNAME }}"
          export MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}
          export MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}

          # Store the current revision for potential rollback
          CURRENT_REVISION=$(kubectl get deployment todo-application-deployment -n dev -o=jsonpath='{.metadata.annotations.kubernetes\.io/change-cause}' || echo "")
          echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV

          # Apply application workload
          cat kube/todo-application-workload.yml | envsubst | kubectl apply -f -

      - name: Verify deployment
        id: verify
        run: |
          kubectl rollout status deployment/todo-application-deployment -n dev --timeout=180s
      
      - name: Rollback on failure
        if: failure() && steps.verify.outcome == 'failure'
        run: |
          echo "Deployment failed! Rolling back to previous version..."
          kubectl rollout undo deployment/todo-application-deployment -n dev
          
          # Wait for rollback to complete
          kubectl rollout status deployment/todo-application-deployment -n dev --timeout=180s
          
          echo "Rollback completed to previous version: ${{ env.CURRENT_REVISION }}"